{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Card","_ref","children","className","React","createElement","CardContent","_ref2","Button","_ref3","onClick","Input","_ref4","value","onChange","placeholder","type","QuizApp","questions","setQuestions","useState","currentQuestion","setCurrentQuestion","selectedAnswer","setSelectedAnswer","userInput","setUserInput","feedback","setFeedback","wrongAttempts","setWrongAttempts","showCorrectAnswer","setShowCorrectAnswer","loadNewQuestion","randomIndex","Math","floor","random","length","useEffect","fetch","then","response","ok","Error","json","data","console","log","catch","error","document","title","MultipleChoiceQuestion","_ref5","handleAnswer","options","map","option","index","key","answer","MultipleOpenEndedQuestion","_ref6","_","e","newValue","target","prevInput","updatedInput","Fragment","question","newWrongAttempts","correct","i","_userInput$i","trim","toLowerCase","every","isCorrect","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode","App"],"mappings":"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","file":"static/js/main.9d42529b.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\n// Custom Card component\r\nfunction Card({ children, className }) {\r\n  return (\r\n    <div className={`border rounded-lg shadow-md p-4 bg-white ${className}`}>\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\n// Custom CardContent component\r\nfunction CardContent({ children }) {\r\n  return <div className=\"p-2\">{children}</div>;\r\n}\r\n\r\n// Custom Button component\r\nfunction Button({ children, onClick, className }) {\r\n  return (\r\n    <button\r\n      onClick={onClick}\r\n      className={`px-4 py-2 rounded bg-blue-500 text-white hover:bg-blue-600 transition ${className}`}\r\n    >\r\n      {children}\r\n    </button>\r\n  );\r\n}\r\n\r\n// Custom Input component\r\nfunction Input({ value, onChange, placeholder, className }) {\r\n  return (\r\n    <input\r\n      type=\"text\"\r\n      value={value}\r\n      onChange={onChange}\r\n      placeholder={placeholder}\r\n      className={`border rounded-lg p-2 w-full focus:outline-none focus:ring-2 focus:ring-blue-500 ${className}`}\r\n    />\r\n  );\r\n}\r\n\r\n\r\nexport default function QuizApp() {\r\n\r\n\r\n  const [questions, setQuestions] = useState([]);\r\n  const [currentQuestion, setCurrentQuestion] = useState(null);\r\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\r\n  const [userInput, setUserInput] = useState([]);\r\n  const [feedback, setFeedback] = useState(\"\");\r\n  const [wrongAttempts, setWrongAttempts] = useState(0);\r\n  const [showCorrectAnswer, setShowCorrectAnswer] = useState(false);\r\n\r\n\r\n  useEffect(() => {\r\n    fetch(`${process.env.PUBLIC_URL}/questions2.json`) // Ensure this file is in \"public/\"\r\n      .then(response => {\r\n        if (!response.ok) {\r\n          throw new Error('Failed to fetch');\r\n        }\r\n        return response.json();\r\n      })\r\n      .then(data => {\r\n        console.log('Fetched data:', data); // Check the fetched data\r\n        setQuestions(data); // Set the questions state\r\n      })\r\n      .catch(error => console.error('Error loading JSON:', error)); // Catch and log errors\r\n  }, []);\r\n\r\n\r\n  useEffect(() => {\r\n    document.title = `CS133 Revision Quiz - ${questions.length} Questions`\r\n    loadNewQuestion();\r\n  }, [questions.length]);\r\n\r\n\r\n  function loadNewQuestion() {\r\n    const randomIndex = Math.floor(Math.random() * questions.length);\r\n    setCurrentQuestion(questions[randomIndex]);\r\n    setSelectedAnswer(null);\r\n    setUserInput([\"\"]);\r\n    setFeedback(\"\");\r\n    setWrongAttempts(0);\r\n    setShowCorrectAnswer(false);\r\n  }\r\n\r\n\r\n  function handleMultipleChoiceAnswer(index) {\r\n    if (index === currentQuestion.answer) {\r\n      setFeedback(\"✅ Correct!\");\r\n      setShowCorrectAnswer(false);\r\n    } else {\r\n      const newWrongAttempts = wrongAttempts + 1;\r\n      setFeedback(`❌ Incorrect! (${newWrongAttempts}/3)`);\r\n      setWrongAttempts(newWrongAttempts);\r\n      if (newWrongAttempts >= 3) {\r\n        setShowCorrectAnswer(true);\r\n      }\r\n    }\r\n    setSelectedAnswer(index);\r\n  }\r\n\r\n\r\n  function handleTextAnswer() {\r\n    const correctness = currentQuestion.answer.map(\r\n      (correct, i) => userInput[i]?.trim().toLowerCase() === correct.toLowerCase()\r\n    );\r\n\r\n    if (correctness.every(isCorrect => isCorrect)) {\r\n      setFeedback(\"✅ All answers correct!\");\r\n    } else {\r\n      setFeedback(\"❌ Some answers are incorrect.\");\r\n      setShowCorrectAnswer(true);\r\n    }\r\n    // if (userInput.trim().toLowerCase() === currentQuestion.answer.toLowerCase()) {\r\n    //   setFeedback(\"✅ Correct!\");\r\n    //   setShowCorrectAnswer(false);\r\n    // } else {\r\n    //   const newWrongAttempts = wrongAttempts + 1;\r\n    //   setFeedback(`❌ Incorrect! (${newWrongAttempts}/3)`);\r\n    //   setWrongAttempts(newWrongAttempts);\r\n    //   if (newWrongAttempts >= 3) {\r\n    //     setShowCorrectAnswer(true);\r\n    //   }\r\n    // }\r\n  }\r\n\r\n\r\n  // Multiple-Choice Answer Component\r\n  const MultipleChoiceQuestion = ({ currentQuestion, selectedAnswer, handleAnswer }) => (\r\n    <div className=\"mt-4 flex flex-col gap-2\">\r\n      {currentQuestion.options.map((option, index) => (\r\n        <Button\r\n          key={index}\r\n          className={`w-full ${selectedAnswer === index\r\n            ? index === currentQuestion.answer\r\n              ? \"bg-green-500\"\r\n              : \"bg-red-500\"\r\n            : \"\"\r\n            }`}\r\n          onClick={() => handleAnswer(index)}\r\n        >\r\n          {option}\r\n        </Button>\r\n      ))}\r\n    </div>\r\n  );\r\n\r\n\r\n  // // Open-Ended Question Component\r\n  // const OpenEndedQuestion = ({ userInput, setUserInput, handleAnswer }) => (\r\n  //   <div className=\"mt-4\">\r\n  //     <Input\r\n  //       value={userInput}\r\n  //       onChange={(e) => setUserInput(e.target.value)}\r\n  //       placeholder=\"Type your answer...\"\r\n  //     />\r\n\r\n  //     <Button className=\"mt-2 bg-blue-500 hover:bg-blue-600\" onClick={handleAnswer}>\r\n  //       Check Answer\r\n  //     </Button>\r\n  //   </div >\r\n  // );\r\n\r\n\r\n  // Multiple Open-Ended Question Component\r\n\r\n  const MultipleOpenEndedQuestion = ({ currentQuestion, userInput, setUserInput, handleAnswer }) => (\r\n    <div className=\"mt-4 flex flex-col space-y-4\">  {/* Ensure vertical stacking */}\r\n      {currentQuestion.answer.map((_, index) => (\r\n        <div key={index} className=\"flex flex-col\">\r\n          <label className=\"text-sm font-medium\">Answer {index + 1}: </label>\r\n          <Input\r\n            value={userInput[index] || \"\"}\r\n            onChange={(e) => {\r\n              const newValue = e.target.value;\r\n              setUserInput (prevInput => {\r\n                const updatedInput = [...prevInput];\r\n                updatedInput[index] = newValue;\r\n                return updatedInput;\r\n              });\r\n            }}\r\n            placeholder={`Type answer ${index + 1}`}\r\n            className=\"mt-1 border border-gray-300 rounded-lg p-2\"\r\n          />\r\n        </div>\r\n      ))}\r\n      <Button className=\"mt-4 bg-blue-500 hover:bg-blue-600\" onClick={handleAnswer}>\r\n        Check Answer\r\n      </Button>\r\n    </div>\r\n  );\r\n\r\n  // Main HTML return statement\r\n  return (\r\n    <div className=\"flex flex-col items-center justify-center min-h-screen p-4 bg-gray-100\">\r\n      <Card className=\"max-w-md w-full text-center p-4\">\r\n        <CardContent>\r\n          {currentQuestion && (\r\n            <>\r\n              <h2 className=\"text-xl font-semibold\">{currentQuestion.question}</h2>\r\n\r\n              {currentQuestion.options ? (\r\n                <MultipleChoiceQuestion\r\n                  currentQuestion={currentQuestion}\r\n                  selectedAnswer={selectedAnswer}\r\n                  handleAnswer={handleMultipleChoiceAnswer}\r\n                />\r\n              ) : (\r\n                <MultipleOpenEndedQuestion\r\n                  userInput={userInput}\r\n                  currentQuestion={currentQuestion}\r\n                  setUserInput={setUserInput}\r\n                  handleAnswer={handleTextAnswer}\r\n                />\r\n              )}\r\n\r\n              <p className=\"mt-4 font-bold\">{feedback}</p>\r\n\r\n              {showCorrectAnswer && (\r\n                <p className=\"mt-2 text-red-500\">✅ Correct Answer: {currentQuestion.answer}</p>\r\n              )}\r\n\r\n              <Button className=\"mt-4 bg-gray-700 hover:bg-gray-800\" onClick={loadNewQuestion}>\r\n                Next Question\r\n              </Button>\r\n            </>\r\n          )}\r\n        </CardContent>\r\n      </Card >\r\n    </div >\r\n  );\r\n}\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}