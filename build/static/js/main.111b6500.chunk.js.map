{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Card","_ref","children","className","React","createElement","CardContent","_ref2","Button","_ref3","onClick","Input","_ref4","value","onChange","placeholder","type","MultipleChoiceQuestion","_ref5","currentQuestion","selectedAnswer","handleAnswer","options","map","option","index","key","answer","MultipleOpenEndedQuestion","_ref6","userInput","setUserInput","onSubmit","e","preventDefault","_","handleInputChange","event","newValue","target","prevInput","updatedInput","QuizApp","questions","setQuestions","useState","setCurrentQuestion","setSelectedAnswer","feedback","setFeedback","wrongAttempts","setWrongAttempts","showCorrectAnswer","setShowCorrectAnswer","loadNewQuestion","_questions$randomInde","randomIndex","Math","floor","random","length","Array","fill","useEffect","fetch","then","response","ok","Error","json","data","catch","error","console","document","title","Fragment","question","newWrongAttempts","sortedAnswers","sort","item","toLowerCase","sortedUserInput","JSON","stringify","isArray","join","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode","App"],"mappings":"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","file":"static/js/main.111b6500.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\n// Custom Card component\r\nfunction Card({ children, className }) {\r\n  return (\r\n    <div className={`border rounded-lg shadow-md p-4 bg-white ${className}`}>\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\n// Custom CardContent component\r\nfunction CardContent({ children }) {\r\n  return <div className=\"p-2\">{children}</div>;\r\n}\r\n\r\n// Custom Button component\r\nfunction Button({ children, onClick, className }) {\r\n  return (\r\n    <button\r\n      onClick={onClick}\r\n      className={`px-4 py-2 rounded bg-blue-500 text-white hover:bg-blue-600 transition ${className}`}\r\n    >\r\n      {children}\r\n    </button>\r\n  );\r\n}\r\n\r\n// Custom Input component with forwardRef to handle focus\r\nconst Input = ({ value, onChange, placeholder, className }) => (\r\n  <input\r\n    type=\"text\"\r\n    value={value}\r\n    onChange={onChange}\r\n    placeholder={placeholder}\r\n    className={`border rounded-lg p-2 w-full focus:outline-none focus:ring-2 focus:ring-blue-500 ${className}`}\r\n  />\r\n);\r\n\r\n\r\n// Multiple-Choice Answer Component\r\nconst MultipleChoiceQuestion = ({ currentQuestion, selectedAnswer, handleAnswer }) => (\r\n  <div className=\"mt-4 flex flex-col gap-2\">\r\n    {currentQuestion.options.map((option, index) => (\r\n      <Button\r\n        key={index}\r\n        className={`w-full ${selectedAnswer === index\r\n          ? index === currentQuestion.answer\r\n            ? \"bg-green-500\"\r\n            : \"bg-red-500\"\r\n          : \"\"\r\n          }`}\r\n        onClick={() => handleAnswer(index)}\r\n      >\r\n        {option}\r\n      </Button>\r\n    ))}\r\n  </div>\r\n);\r\n\r\n// Multiple Open-Ended Question Component\r\nconst MultipleOpenEndedQuestion = ({ currentQuestion, userInput, setUserInput, handleAnswer }) => {\r\n  // Handler for input changes\r\n  const handleInputChange = (index, event) => {\r\n    const newValue = event.target.value;\r\n    setUserInput((prevInput) => {\r\n      const updatedInput = [...prevInput];\r\n      updatedInput[index] = newValue;\r\n      return updatedInput;\r\n    });\r\n  };\r\n\r\n  // Handle form submission\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault(); // Prevent form from refreshing the page\r\n    handleAnswer(); // Call the provided handleAnswer function\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className=\"mt-4 flex flex-col space-y-4\">\r\n      {currentQuestion.answer.map((_, index) => (\r\n        <div key={index} className=\"flex flex-col\">\r\n          <label className=\"text-sm font-medium\">Answer {index + 1}: </label>\r\n          <Input\r\n            value={userInput[index] || \"\"}\r\n            onChange={(e) => handleInputChange(index, e)}\r\n            placeholder={`Type answer ${index + 1}`}\r\n            className=\"mt-1 border border-gray-300 rounded-lg p-2\"\r\n          />\r\n        </div>\r\n      ))}\r\n      <Button type=\"submit\" className=\"mt-4 bg-blue-500 hover:bg-blue-600\">\r\n        Check Answer\r\n      </Button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default function QuizApp() {\r\n  const [questions, setQuestions] = useState([]);\r\n  const [currentQuestion, setCurrentQuestion] = useState(null);\r\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\r\n  const [userInput, setUserInput] = useState([]);\r\n  const [feedback, setFeedback] = useState(\"\");\r\n  const [wrongAttempts, setWrongAttempts] = useState(0);\r\n  const [showCorrectAnswer, setShowCorrectAnswer] = useState(false);\r\n\r\n  useEffect(() => {\r\n    fetch(`${process.env.PUBLIC_URL}/questions2.json`) // Ensure this file is in \"public/\"\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to fetch\");\r\n        }\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        setQuestions(data); // Set the questions state\r\n      })\r\n      .catch((error) => console.error(\"Error loading JSON:\", error)); // Catch and log errors\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    document.title = `CS133 Revision Quiz - ${questions.length} Questions`;\r\n    loadNewQuestion();\r\n  }, [questions.length]);\r\n\r\n  function loadNewQuestion() {\r\n    const randomIndex = Math.floor(Math.random() * questions.length);\r\n    setCurrentQuestion(questions[randomIndex]);\r\n    setSelectedAnswer(null);\r\n    setUserInput(new Array(questions[randomIndex]?.answer.length || 0).fill(\"\")); // reset user input\r\n    setFeedback(\"\");\r\n    setWrongAttempts(0);\r\n    setShowCorrectAnswer(false);\r\n  }\r\n\r\n  function handleMultipleChoiceAnswer(index) {\r\n    if (index === currentQuestion.answer) {\r\n      setFeedback(\"✅ Correct!\");\r\n      setShowCorrectAnswer(false);\r\n    } else {\r\n      const newWrongAttempts = wrongAttempts + 1;\r\n      setFeedback(`❌ Incorrect! (${newWrongAttempts}/3)`);\r\n      setWrongAttempts(newWrongAttempts);\r\n      if (newWrongAttempts >= 3) {\r\n        setShowCorrectAnswer(true);\r\n      }\r\n    }\r\n    setSelectedAnswer(index);\r\n  }\r\n\r\n  function handleTextAnswer() {\r\n\r\n    const sortedAnswers = [...currentQuestion.answer].sort().map(item => item.toLowerCase())\r\n    const sortedUserInput = [...userInput].sort().map(item => item.toLowerCase())\r\n\r\n    if (JSON.stringify(sortedAnswers) === JSON.stringify(sortedUserInput)) {\r\n      setFeedback(\"✅ All answers correct!\");\r\n    } else {\r\n      setFeedback(\"❌ Some answers are incorrect.\");\r\n      setShowCorrectAnswer(true);\r\n    }\r\n    // const sortedCorrectAnswers = [...correctAnswers].sort();\r\n    // // Check if both sorted arrays are the same\r\n    // return JSON.stringify(sortedUserAnswers) === JSON.stringify(sortedCorrectAnswers);\r\n\r\n    // const sortedAnswers = currentQuestion.answer.slice().sort((a, b) => a - b);\r\n    // const sortedUserInput = userInput.slice().sort((a, b) => a - b);\r\n\r\n    // console.log(sortedAnswers);\r\n    // console.log(sortedUserInput);\r\n\r\n    // const sortedAnswers = currentQuestion.answer.sort()\r\n    // const sortedUserInput = userInput.sort()\r\n    // const correctness = sortedAnswers.map(\r\n    //   (correct, i) => sortedUserInput[i]?.trim().toLowerCase() === correct.toLowerCase()\r\n    // );\r\n\r\n    // if (correctness.every((isCorrect) => isCorrect)) {\r\n    //   setFeedback(\"✅ All answers correct!\");\r\n    // } else {\r\n    //   setFeedback(\"❌ Some answers are incorrect.\");\r\n    //   setShowCorrectAnswer(true);\r\n    // }\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex flex-col items-center justify-center min-h-screen p-4 bg-gray-100\">\r\n      <Card className=\"max-w-md w-full text-center p-4\">\r\n        <CardContent>\r\n          {currentQuestion && (\r\n            <>\r\n              <h2 className=\"text-xl font-semibold\">{currentQuestion.question}</h2>\r\n\r\n              {currentQuestion.options ? (\r\n                <MultipleChoiceQuestion\r\n                  currentQuestion={currentQuestion}\r\n                  selectedAnswer={selectedAnswer}\r\n                  handleAnswer={handleMultipleChoiceAnswer}\r\n                />\r\n              ) : (\r\n                <MultipleOpenEndedQuestion\r\n                  userInput={userInput}\r\n                  currentQuestion={currentQuestion}\r\n                  setUserInput={setUserInput}\r\n                  handleAnswer={handleTextAnswer}\r\n                />\r\n              )}\r\n\r\n              <p className=\"mt-4 font-bold\">{feedback}</p>\r\n\r\n              {showCorrectAnswer && (\r\n                <p className=\"mt-2 text-red-500\">✅ Correct Answer: {Array.isArray(currentQuestion.answer) ? \r\n                                                                      currentQuestion.answer.join(\", \") : \r\n                                                                      currentQuestion.answer}</p>\r\n              )}\r\n\r\n              <Button className=\"mt-4 bg-gray-700 hover:bg-gray-800\" onClick={loadNewQuestion}>\r\n                Next Question\r\n              </Button>\r\n            </>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}