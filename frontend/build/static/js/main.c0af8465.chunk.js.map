{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Card","_ref","children","className","React","createElement","CardContent","_ref2","Button","_ref3","onClick","Input","_ref4","value","onChange","placeholder","type","MultipleChoiceQuestion","_ref5","currentQuestion","selectedAnswer","handleAnswer","options","map","option","index","key","answer","OpenEndedQuestion","_ref6","userInput","setUserInput","canTryQuestion","onSubmit","e","preventDefault","_","length","handleInputChange","event","newValue","target","prevInput","updatedInput","QuizApp","questions","setQuestions","useState","setCurrentQuestion","setSelectedAnswer","feedback","setFeedback","wrongAttempts","setWrongAttempts","showCorrectAnswer","setShowCorrectAnswer","quizStarted","setQuizStarted","numAnsweredQs","setNumAnsweredQs","numCorrectQs","setNumCorrectQs","setCanTryQuestion","loadNewQuestion","_questions$randomInde","randomIndex","Math","floor","random","Array","fill","useEffect","fetch","then","response","ok","Error","json","data","catch","error","console","document","title","Fragment","question","count","newWrongAttempts","sortedAnswers","sort","item","toLowerCase","intersection","filter","includes","isArray","join","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode","App"],"mappings":"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","file":"static/js/main.c0af8465.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\n// Custom Card component\r\nfunction Card({ children, className }) {\r\n  return (\r\n    <div className={`border rounded-2x1 shadow-lg p-6 bg-white ${className}`}>\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\n// Custom CardContent component\r\nfunction CardContent({ children }) {\r\n  return <div className=\"p-2\">{children}</div>;\r\n}\r\n\r\n// Custom Button component\r\nfunction Button({ children, onClick, className }) {\r\n  return (\r\n    <button\r\n      onClick={onClick}\r\n      className={`px-6 py-3 rounded-lg font-semibold text-white transition ${className}`}\r\n    >\r\n      {children}\r\n    </button>\r\n  );\r\n}\r\n\r\n// Custom Input component with forwardRef to handle focus\r\nconst Input = ({ value, onChange, placeholder, className }) => (\r\n  <input\r\n    type=\"text\"\r\n    value={value}\r\n    onChange={onChange}\r\n    placeholder={placeholder}\r\n    className={`border rounded-lg p-2 w-full focus:outline-none focus:ring-2 focus:ring-blue-500 ${className}`}\r\n  />\r\n);\r\n\r\n\r\n// Multiple-Choice Answer Component\r\nconst MultipleChoiceQuestion = ({ currentQuestion, selectedAnswer, handleAnswer }) => (\r\n  <div className=\"mt-4 flex flex-col gap-3\">\r\n    {currentQuestion.options.map((option, index) => (\r\n      <Button\r\n      key={index}\r\n      className={`w-full ${selectedAnswer === index\r\n        ? index === currentQuestion.answer\r\n          ? \"bg-green-500 hover:bg-green-600\"\r\n          : \"bg-red-500 hover:bg-red-600\"\r\n        : \"bg-blue-500 hover:bg-blue-600\"}\r\n        `}\r\n      onClick={() => handleAnswer(index)}\r\n    >\r\n      {option}\r\n    </Button>\r\n    ))}\r\n  </div>\r\n);\r\n\r\n\r\n// Open-Ended Question Component\r\nconst OpenEndedQuestion = ({ currentQuestion, userInput, setUserInput, handleAnswer, canTryQuestion }) => {\r\n  // Handler for input changes\r\n  const handleInputChange = (index, event) => {\r\n    const newValue = event.target.value;\r\n    setUserInput((prevInput) => {\r\n      const updatedInput = [...prevInput];\r\n      updatedInput[index] = newValue;\r\n      return updatedInput;\r\n    });\r\n  };\r\n\r\n  // Handle form submission\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault(); // Prevent form from refreshing the page\r\n    handleAnswer(); // Call the provided handleAnswer function\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className=\"mt-4 flex flex-col space-y-4\">\r\n      {currentQuestion.answer.map((_, index) => (\r\n        <div key={index} className=\"flex flex-col\">\r\n          <label className=\"text-sm font-medium\">{(currentQuestion.answer.length === 1) ? `Answer: ` : `Answer ${index + 1}: `}</label>\r\n          <Input\r\n            value={userInput[index] || \"\"}\r\n            onChange={(e) => handleInputChange(index, e)}\r\n            placeholder={(currentQuestion.answer.length === 1) ? `Type answer` : `Type answer ${index + 1}`}\r\n            className=\"mt-1 border border-gray-300 rounded-lg p-2\"\r\n          />\r\n        </div>\r\n      ))}\r\n      {canTryQuestion && (<Button type=\"submit\" className=\"mt-4 bg-blue-500 hover:bg-blue-600\">\r\n        Check Answer\r\n      </Button>)}\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default function QuizApp() {\r\n  const [questions, setQuestions] = useState([]);\r\n  const [currentQuestion, setCurrentQuestion] = useState(null);\r\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\r\n  const [userInput, setUserInput] = useState([]);\r\n  const [feedback, setFeedback] = useState(\"\");\r\n  const [wrongAttempts, setWrongAttempts] = useState(0);\r\n  const [showCorrectAnswer, setShowCorrectAnswer] = useState(false);\r\n  const [quizStarted, setQuizStarted] = useState(false);\r\n  const [numAnsweredQs, setNumAnsweredQs] = useState(0);\r\n  const [numCorrectQs, setNumCorrectQs] = useState(0);\r\n  const [canTryQuestion, setCanTryQuestion] = useState(true);\r\n\r\n  // fetch questions from public directory\r\n  useEffect(() => {\r\n    fetch(`${process.env.PUBLIC_URL}/questions2.json`) // Ensure this file is in \"public/\"\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to fetch\");\r\n        }\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        setQuestions(data); // Set the questions state\r\n      })\r\n      .catch((error) => console.error(\"Error loading JSON:\", error)); // Catch and log errors\r\n  }, []);\r\n\r\n  // load new question, and set title\r\n  useEffect(() => {\r\n    document.title = `CS133 Revision Quiz - ${questions.length} Questions`;\r\n    loadNewQuestion();\r\n  }, [questions.length]);\r\n\r\n  // load new question\r\n  function loadNewQuestion() {\r\n    const randomIndex = Math.floor(Math.random() * questions.length);\r\n    setCurrentQuestion(questions[randomIndex]);\r\n    setSelectedAnswer(null);\r\n    setUserInput(new Array(questions[randomIndex]?.answer.length || 0).fill(\"\")); // reset user input\r\n    setFeedback(\"\");\r\n    setWrongAttempts(0);\r\n    setShowCorrectAnswer(false);\r\n    setCanTryQuestion(true);\r\n  }\r\n\r\n  function startQuiz() {\r\n    setQuizStarted(true);\r\n    loadNewQuestion();\r\n  }\r\n\r\n  function stopQuiz() {\r\n    setQuizStarted(false);\r\n  }\r\n\r\n  // multiple choice answer\r\n  function handleMultipleChoiceAnswer(index) {\r\n    if (canTryQuestion) {\r\n      if (index === currentQuestion.answer) {\r\n        setFeedback(\"✅ Correct!\");\r\n        setShowCorrectAnswer(false);\r\n        setNumCorrectQs(count => count + 1);\r\n        setNumAnsweredQs(count => count + 1);\r\n        setCanTryQuestion(false);\r\n      } else {\r\n        const newWrongAttempts = wrongAttempts + 1;\r\n        setFeedback(`❌ Incorrect! (${newWrongAttempts}/3)`);\r\n        setWrongAttempts(newWrongAttempts);\r\n        if (newWrongAttempts >= 3) {\r\n          setShowCorrectAnswer(true);\r\n          setNumAnsweredQs(count => count + 1);\r\n          setCanTryQuestion(false);\r\n        }\r\n      }\r\n      setSelectedAnswer(index);\r\n    }\r\n  }\r\n\r\n  // text answer\r\n  function handleTextAnswer() {\r\n\r\n    if (canTryQuestion) {\r\n      const sortedAnswers = [...currentQuestion.answer].sort().map(item => item.toLowerCase())\r\n      const sortedUserInput = [...userInput].sort().map(item => item.toLowerCase())\r\n\r\n      const intersection = sortedUserInput.filter(item => sortedAnswers.includes(item))\r\n      if (intersection.length === currentQuestion.answer.length) {\r\n        setFeedback((userInput.length === 1) ? \"✅ Answer is correct!\" : \"✅ All answers correct!\");\r\n        setShowCorrectAnswer(false);\r\n        setNumCorrectQs(count => count + 1);\r\n        setNumAnsweredQs(count => count + 1);\r\n        setCanTryQuestion(false);\r\n      } else {\r\n        const newWrongAttempts = wrongAttempts + 1;\r\n        if (userInput.length === 1) {\r\n          setFeedback(`❌ Answer is incorrect. (${newWrongAttempts}/3)`);\r\n        } else {\r\n          setFeedback(`❌ ${intersection.length} answers are correct. (${newWrongAttempts}/3)`);\r\n        }\r\n        setWrongAttempts(newWrongAttempts);\r\n        if (newWrongAttempts >= 3) {\r\n          setShowCorrectAnswer(true);\r\n          setNumAnsweredQs(count => count + 1);\r\n          setCanTryQuestion(false);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // main html return statement\r\n  return (\r\n    <div className=\"flex flex-col items-center justify-center min-h-screen p-4 bg-gray-100\">\r\n      {!quizStarted ? (\r\n        <Card className=\"max-w-lg text-center p-6\">\r\n          <h1 className=\"text-3xl font-bold mb-4\">CS133 Revision Quiz</h1>\r\n          <p className=\"text-lg mb-6\">Test your knowledge and track your progress!</p>\r\n          <p className=\"text-lg mb-6\">Score: {numCorrectQs}/{numAnsweredQs}</p>\r\n          <Button className=\"bg-blue-500 hover:bg-blue-600\" onClick={startQuiz}>\r\n            Start Quiz\r\n          </Button>\r\n        </Card>\r\n      ) : (\r\n      <Card className=\"max-w-md w-full text-center p-4\">\r\n        <p>Score: {numCorrectQs}/{numAnsweredQs}</p>\r\n        <CardContent>\r\n          {currentQuestion && (\r\n            <>\r\n              <h2 className=\"text-xl font-semibold\">{currentQuestion.question}</h2>\r\n\r\n              {currentQuestion.options ? (\r\n                <MultipleChoiceQuestion\r\n                  currentQuestion={currentQuestion}\r\n                  selectedAnswer={selectedAnswer}\r\n                  handleAnswer={handleMultipleChoiceAnswer}\r\n                />\r\n              ) : (\r\n                <OpenEndedQuestion\r\n                  userInput={userInput}\r\n                  currentQuestion={currentQuestion}\r\n                  setUserInput={setUserInput}\r\n                  handleAnswer={handleTextAnswer}\r\n                  canTryQuestion={canTryQuestion}\r\n                />\r\n              )}\r\n\r\n              <p className=\"mt-4 font-bold\">{feedback}</p>\r\n\r\n              {showCorrectAnswer && (\r\n                <p className=\"mt-2 text-red-500\">✅ Correct Answer: {Array.isArray(currentQuestion.answer) ? \r\n                                                                      currentQuestion.answer.join(\", \") : \r\n                                                                      currentQuestion.answer}</p>\r\n              )}\r\n\r\n              <Button className=\"mt-4 bg-gray-700 hover:bg-gray-800\" onClick={loadNewQuestion}>\r\n                Next Question\r\n              </Button>\r\n\r\n              <Button className=\"mt-4 bg-gray-700 hover:bg-gray-800\" onClick={stopQuiz}>\r\n                Stop Quiz\r\n              </Button>\r\n            </>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}